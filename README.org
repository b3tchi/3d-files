* Printing

#+begin_src mermaid :file ./test.png
---
config:
  look: handDrawn
  theme: forrest
---
flowchart LR
input["enter model/s"]
export("export as stl")
output("printing model")
multiple_models{"contains multiple models?"}
combine("combine multiple models")
convert("convert to gcode")
preview("generate preview")
validate("validate setup")

trigger-->input
output-->get_print

subgraph user
  trigger
  get_print
end
subgraph script
  input-->
  export-->
  multiple_models--yes-->
    combine-->
    convert
  multiple_models--no-->
    convert
  convert-->
  validate-->
  preview-->
  output
end
#+end_src

#+RESULTS:
[[file:./test.png]]

#+begin_src emacs-lisp
(setq plantuml-default-exec-mode 'executable)
(setq plantuml-executable-path "/usr/bin/plantuml")

(setq org-plantuml-exec-mode 'plantuml)
(setq org-plantuml-executable-path "/usr/bin/plantuml")

(org-babel-do-load-languages 'org-babel-load-languages
        (append org-babel-load-languages '((plantuml . t))))

;; Enable plantuml-mode for PlantUML files
(require 'plantuml-mode)
(add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))

(add-to-list
  'org-src-lang-modes '("plantuml" . plantuml))
#+end_src

#+RESULTS:
: ((plantuml . plantuml) (nu . nushell-ts) (mermaid . mermaid-ts) (tmux . sh) (md . markdown) (C . c) (C++ . c++) (asymptote . asy) (beamer . latex) (calc . fundamental) (cpp . c++) (ditaa . artist) (desktop . conf-desktop) (dot . fundamental) (elisp . emacs-lisp) (ocaml . tuareg) (screen . shell-script) (sqlite . sql) (toml . conf-toml) (shell . sh) (ash . sh) (sh . sh) (bash . sh) (jsh . sh) (bash2 . sh) (dash . sh) (dtksh . sh) (ksh . sh) (es . sh) (rc . sh) (itcsh . sh) (tcsh . sh) (jcsh . sh) (csh . sh) (ksh88 . sh) (oash . sh) (pdksh . sh) (mksh . sh) (posix . sh) (wksh . sh) (wsh . sh) (zsh . sh) (rpm . sh))

#+begin_src plantuml :file hello-uml.svg
!theme crt-amber
'skinparam handwritten true
skinparam defaultFontName Iosevka
|user|
start
    :runscript;
    |script|
    :export stl;
    if (contains multiple files ?) then (yes)
        :generate composite file name;
        :merge all stls to one file;
    endif
    :generate gcode;
    :generate preview;
stop
#+end_src

#+RESULTS:
[[file:hello-uml.svg]]

#+begin_src plantuml :file hello-font.png
listfont
#+end_src

#+RESULTS:
[[file:hello-font.png]]

#+begin_src sh
# ls -a
echo 'abc'
#+end_src

#+RESULTS:
: abc

#+begin_src nu :var test='macros'
# echo 'abc'
try { echo 'abc' | to csv } catch { ls | where name == $test }
#+end_src

#+RESULTS:
: â•­â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
: â”‚ # â”‚  name  â”‚ type â”‚  size   â”‚  modified  â”‚
: â”œâ”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
: â”‚ 0 â”‚ macros â”‚ dir  â”‚ 4.0 KiB â”‚ 2 days ago â”‚
: â•°â”€â”€â”€â”´â”€â”€â”€â”€â”€â”€â”€â”€â”´â”€â”€â”€â”€â”€â”€â”´â”€â”€â”€â”€â”€â”€â”€â”€â”€â”´â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯

#+begin_src nu :var test='macros'
use ./macros/tdpr.nu
tdpr setup --help
#+end_src

#+begin_src nu :var test='macros'
use ./macros/tdpr/fx.nu; (fx create-gcode 'name' 'stl_path') | reverse | get 1
#+end_src

#+RESULTS:
: stl_path.gcode

#+begin_src nu :var test='macros'
use ./macros/tdpr/fx.nu; (fx create-stl 'model_name' 'part' 'version' 'tmp_path') | to text
#+end_src

#+RESULTS:
: --console
: /home/jan/repos/b3tchi/3d-files/feat/popup-mvp1/macros/export-to-stl.py
: /home/jan/repos/b3tchi/3d-files/feat/popup-mvp1/models/model_name/part
: /home/jan/repos/b3tchi/3d-files/feat/popup-mvp1/tmp_path/part-version.stl

#+begin_src nu :var test='macros'
use ./macros/tdpr/fx.nu; (fx part-version 'xmain' '') | to text
#+end_src

#+begin_src nu :var test='macros'
use ./macros/tdpr/fx.nu
let branch = 'feat/popup-mvp1'

let parts_base = fx build-short 'feat/test' 'test' '0.1' '1'
let resp = $parts_base
$resp | to yaml

#+end_src

#+RESULTS:
: 1te@0.1n
:

#+begin_src nu :var test='macros'
use std
use ./macros/tdpr/fx.nu
let model = 'spool-holder'
let branch = 'feat/popup-mvp1'
let timestamp = (date now | format date %Y%m%d%H%M%S)
let parts = [base base floor demi-sec]

let parts_base = fx build-base $model $branch $timestamp $parts
let resp = $parts_base
$resp | to yaml

#+end_src
#+RESULTS:
#+begin_example
- part: base
  count: 2
  model: spool-holder
  branch: feat/popup-mvp1
  timestamp: '20241125004405'
  test: xx
  testx: xx
- part: floor
  count: 1
  model: spool-holder
  branch: feat/popup-mvp1
  timestamp: '20241125004405'
  test: xx
  testx: xx
- part: demi-sec
  count: 1
  model: spool-holder
  branch: feat/popup-mvp1
  timestamp: '20241125004405'
  test: xx
  testx: xx

#+end_example

#+begin_src nu :var test='macros'
use std
use ./macros/tdpr/fx.nu
let model = 'spool-holder'
let branch = 'feat/popup-mvp1'
let timestamp = (date now | format date %Y%m%d%H%M%S)
let parts = [base base floor demi-sec]

let parts_base = (fx build-base $model $branch $timestamp $parts)
    | insert last_tag {|row|
        try {git describe --tags --match $"($row.model)/($row.part)/*" --abbrev=0 HEAD e> (std null-device)}}
    | insert version {|row|
        fx build-version $row.last_tag}
    | insert stem {|row|
        fx part-version $row.branch $row.part $row.version $row.timestamp}
    | insert short {|row|
        fx build-short $row.branch $row.part $row.version $count}

let multi_name = 'x'
    | append ($parts_name | get short)
    | append $timestamp
    | str join '-'

# let parts_version =
let resp = $parts_base
# let resp = $multi_name
$resp | to yaml
#      name: $part
#    , tag:
# }} | to text

#+end_src

#+RESULTS:
#+begin_example
Error: [31mnu::parser::variable_not_found[0m

  [31mÃ—[0m Variable not found.
     â•­â”€[[36;1;4m/home/jan/repos/b3tchi/3d-files/feat/popup-mvp1/macros/tdpr/fx.nu[0m:175:13]
 [2m174[0m â”‚     if ($branch != 'main') {
 [2m175[0m â”‚         if ($next_timestamp == null) {
     Â· [35;1m            â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€[0m
     Â·                    [35;1mâ•°â”€â”€ [35;1mvariable not found. [0m[0m
 [2m176[0m â”‚             $tag_parts = ( $tag_parts | append '-next' )
     â•°â”€â”€â”€â”€

#+end_example

#+begin_src emacs-lisp
   (defun my-remove-variables-from-imenu-index (index)
     "Remove 'Variables' category entries from imenu INDEX."
     (seq-filter
      (lambda (item)
        (let ((name (car item)))
          (not (and (stringp name) (string-equal name "Variables")))))
      index))

   (defun my-customize-imenu ()
     "Customize imenu to exclude 'Variables' entries."
     ;; Set custom index function that includes post-processing
     (setq imenu-create-index-function
           (lambda ()
             (my-remove-variables-from-imenu-index (imenu-default-create-index-function)))))

   ;; Add to desired mode hooks, for example, for programming modes:
   (add-hook 'nushell-ts-mode-hook 'my-customize-imenu)
#+end_src

#+RESULTS:
#+begin_example
Error: [31mnu::parser::unbalanced_delimiter[0m

  [31mÃ—[0m Unbalanced delimiter.
    â•­â”€[[36;1;4m/home/jan/repos/b3tchi/3d-files/feat/popup-mvp1/nushell-5YbmJ5[0m:14:20]
 [2m13[0m â”‚  [2m7[0m â”‚         name: $part
 [2m14[0m â”‚  [2m8[0m â”‚     }
    Â· [35;1m         â”¬[0m
    Â·          [35;1mâ•°â”€â”€ [35;1munbalanced { and }[0m[0m
 [2m15[0m â”‚    Â· [35;1m     â”¬[0m
    â•°â”€â”€â”€â”€

#+end_example
