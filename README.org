* Printing

#+begin_src mermaid :file ./test.png
---
config:
  look: handDrawn
  theme: forrest
---
flowchart LR
input["enter model/s"]
export("export as stl")
output("printing model")
multiple_models{"contains multiple models?"}
combine("combine multiple models")
convert("convert to gcode")
preview("generate preview")
validate("validate setup")

trigger-->input
output-->get_print

subgraph user
  trigger
  get_print
end
subgraph script
  input-->
  export-->
  multiple_models--yes-->
    combine-->
    convert
  multiple_models--no-->
    convert
  convert-->
  validate-->
  preview-->
  output
end
#+end_src

#+RESULTS:
[[file:./test.png]]

#+begin_src emacs-lisp
(setq plantuml-default-exec-mode 'executable)
(setq plantuml-executable-path "/usr/bin/plantuml")

(setq org-plantuml-exec-mode 'plantuml)
(setq org-plantuml-executable-path "/usr/bin/plantuml")

(org-babel-do-load-languages 'org-babel-load-languages
        (append org-babel-load-languages '((plantuml . t))))

;; Enable plantuml-mode for PlantUML files
(require 'plantuml-mode)
(add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))

(add-to-list
  'org-src-lang-modes '("plantuml" . plantuml))
#+end_src

#+RESULTS:
: ((plantuml . plantuml) (nu . nushell-ts) (mermaid . mermaid-ts) (tmux . sh) (md . markdown) (C . c) (C++ . c++) (asymptote . asy) (beamer . latex) (calc . fundamental) (cpp . c++) (ditaa . artist) (desktop . conf-desktop) (dot . fundamental) (elisp . emacs-lisp) (ocaml . tuareg) (screen . shell-script) (sqlite . sql) (toml . conf-toml) (shell . sh) (ash . sh) (sh . sh) (bash . sh) (jsh . sh) (bash2 . sh) (dash . sh) (dtksh . sh) (ksh . sh) (es . sh) (rc . sh) (itcsh . sh) (tcsh . sh) (jcsh . sh) (csh . sh) (ksh88 . sh) (oash . sh) (pdksh . sh) (mksh . sh) (posix . sh) (wksh . sh) (wsh . sh) (zsh . sh) (rpm . sh))

#+begin_src plantuml :file hello-uml.svg
!theme crt-amber
'skinparam handwritten true
skinparam defaultFontName Iosevka
|user|
start
    :runscript;
    |script|
    :export stl;
    if (contains multiple files ?) then (yes)
        :generate composite file name;
        :merge all stls to one file;
    endif
    :generate gcode;
    :generate preview;
stop
#+end_src

#+RESULTS:
[[file:hello-uml.svg]]

#+begin_src plantuml :file hello-font.png
listfont
#+end_src

#+RESULTS:
[[file:hello-font.png]]

#+begin_src sh
# ls -a
echo 'abc'
#+end_src

#+RESULTS:
: abc

#+begin_src nu :var test='macros'
# echo 'abc'
try { echo 'abc' | to csv } catch { ls | where name == $test }
#+end_src

#+RESULTS:
: ╭───┬────────┬──────┬─────────┬────────────╮
: │ # │  name  │ type │  size   │  modified  │
: ├───┼────────┼──────┼─────────┼────────────┤
: │ 0 │ macros │ dir  │ 4.0 KiB │ 2 days ago │
: ╰───┴────────┴──────┴─────────┴────────────╯

#+begin_src nu
use ./macros/tdpr.nu
tdpr setup --help
#+end_src

#+begin_src nu :var test='macros'
use ./macros/tdpr/fx.nu; (fx create-gcode 'name' 'stl_path') | reverse | get 1
#+end_src

#+RESULTS:
: stl_path.gcode

#+begin_src nu :var test='macros'
use ./macros/tdpr/fx.nu; (fx create-stl 'model_name' 'part' 'version' 'tmp_path') | to text
#+end_src

#+RESULTS:
: --console
: /home/jan/repos/b3tchi/3d-files/feat/popup-mvp1/macros/export-to-stl.py
: /home/jan/repos/b3tchi/3d-files/feat/popup-mvp1/models/model_name/part
: /home/jan/repos/b3tchi/3d-files/feat/popup-mvp1/tmp_path/part-version.stl

#+begin_src nu :var test='macros'
use ./macros/tdpr/fx.nu; (fx part-version 'xmain' '') | to text
#+end_src

#+begin_src nu :var test='macros'
use ./macros/tdpr/fx.nu
fx build-short 'feat/test' 'test' '0.1' 3 | to yaml
#+end_src

#+begin_src nu :var test='macros'
use ./macros/tdpr/fx.nu
let t = [[count stl_path];
            [3 'darfour-1.1.0-next+240103']
        ]
fx merge-stl 'conf' 'output.stl' $t
#+end_src

#+RESULTS:
#+begin_example
╭────┬───────────────────────────╮
│  0 │ --load                    │
│  1 │ conf                      │
│  2 │ --export-stl              │
│  3 │ --merge                   │
│  4 │ --split                   │
│  5 │ --ensure-on-bed           │
│  6 │ --output                  │
│  7 │ output.stl                │
│  8 │ darfour-1.1.0-next+240103 │
│  9 │ darfour-1.1.0-next+240103 │
│ 10 │ darfour-1.1.0-next+240103 │
╰────┴───────────────────────────╯
#+end_example

#+begin_src nu :var test='macros'
use ./macros/tdpr/fx.nu
let t = [[count stl_path];
            [1 'capillar-0.1.1-next+240103']
            [3 'darfour-1.1.0-next+240103']
        ]
fx merge-stl 'conf' 'output.stl' $t
#+end_src

#+RESULTS:
#+begin_example
╭────┬────────────────────────────╮
│  0 │ --load                     │
│  1 │ conf                       │
│  2 │ --export-stl               │
│  3 │ --merge                    │
│  4 │ --split                    │
│  5 │ --ensure-on-bed            │
│  6 │ --output                   │
│  7 │ output.stl                 │
│  8 │ capillar-0.1.1-next+240103 │
│  9 │ darfour-1.1.0-next+240103  │
│ 10 │ darfour-1.1.0-next+240103  │
│ 11 │ darfour-1.1.0-next+240103  │
╰────┴────────────────────────────╯
#+end_example

#+begin_src nu :var test='macros'
use ./macros/tdpr/fx.nu
let t = [[short stem];
            ['1ca@0.1.1n' 'capillar-0.1.1-next+240103']
            ['3da@1.1.0n' 'darfour-1.1.0-next+240103']
        ]
fx build-final-name $t '241003'
#+end_src

#+RESULTS:
: x-1ca@0.1.1n-3da@1.1.0n-241003

#+begin_src nu :var test='macros'
use ./macros/tdpr/fx.nu
let t = [[short stem]; ['1ca@0.1.1' 'capillar-0.1.1-next+240103']]
$t
fx build-final-name $t '241003'
#+end_src

#+RESULTS:
: capillar-0.1.1-next+240103

#+begin_src nu :var test='macros'
use ./macros/tdpr/fx.nu

let temp_path = '/tmp/3d-files'
let timestamp = '230110'
let model = 'model1'
let final_stem = 'partx-0.1-next+230412'

fx build-final-file $temp_path $timestamp $model $final_stem 'gcode'
#+end_src

#+RESULTS:
: /tmp/3d-files/230110-model1/partx-0.1-next+230412.gcode

#+begin_src nu :var test='macros'
use ./macros/tdpr/fx.nu

let temp_path = '/tmp/3d-files'
let timestamp = '230110'
let model = 'model1'
let final_stem = 'partx-0.1-next+230412'

fx build-final-file $temp_path $timestamp $model $final_stem 'gcode'
#+end_src

#+RESULTS:
: /tmp/3d-files/230110-model1/partx-0.1-next+230412.gcode

#+begin_src nu :var test='macros'
use ./macros/tdpr/fx.nu
git ...(fx last-tag-args 'model' 'rote')
#+end_src

#+RESULTS:
: fatal: No names found, cannot describe anything.

#+begin_src nu :var test='macros'
use std
use ./macros/tdpr/fx.nu
let model = 'spool-holder'
let branch = 'feat/popup-mvp1'
let timestamp = (date now | format date %Y%m%d%H%M%S)
let parts = [base base floor demi-sec]

let parts_base = fx build-base $model $branch $timestamp $parts
let resp = $parts_base
$resp | to yaml

#+end_src
#+RESULTS:
#+begin_example
- part: base
  count: 2
  model: spool-holder
  branch: feat/popup-mvp1
  timestamp: '20241125004405'
  test: xx
  testx: xx
- part: floor
  count: 1
  model: spool-holder
  branch: feat/popup-mvp1
  timestamp: '20241125004405'
  test: xx
  testx: xx
- part: demi-sec
  count: 1
  model: spool-holder
  branch: feat/popup-mvp1
  timestamp: '20241125004405'
  test: xx
  testx: xx

#+end_example

#+begin_src nu :var test='macros'
use std
use ./macros/tdpr/fx.nu
let model = 'spool-holder'
let branch = 'feat/popup-mvp1'
let timestamp = (date now | format date %Y%m%d%H%M%S)
let temp_path = '/tmp/3d-files'
let parts = [base base floor demi-sec]
let macro_path = ( './macros' | path expand | path join 'export-to-stl.py' )
let model_root = ( './model' | path expand )

let parts_base = (fx build-base $model $branch $timestamp $parts)
    | insert last_tag {|row|
        try {git ...(fx last-tag-args $model $row.part) e> (std null-device)}}
    | insert version {|row|
        fx build-version $row.last_tag}
    | insert stem {|row|
        fx part-version $branch $row.part $row.version $timestamp}
    | insert short {|row|
        fx build-short $branch $row.part $row.version $row.count}
    | insert stl_path {|row|
        fx build-stl-path $temp_path $model $row.stem $timestamp}
    | insert fcad_dir {|row|
        fx build-part-dir $model_root $model $row.part}
    # | insert fcad_path {|row|
    #     fx build-short $row.branch $row.part $row.version $row.count}

# let parts_version =
let resp = $parts_base
# let resp = $multi_name
$resp | to yaml
#      name: $part
#    , tag:
# }} | to text

#+end_src

#+RESULTS:
#+begin_example
- part: base
  count: 2
  model: spool-holder
  branch: feat/popup-mvp1
  timestamp: '20241125114828'
  last_tag: ''
  version: 0.1.0
  stem: base-0.1.0-next+20241125114828
  short: 2ba@0.1.0n
  stl_path: /tmp/3d-files/20241125114828-spool-holder/base-0.1.0-next+20241125114828.stl
  fcad_dir: /home/jan/repos/b3tchi/3d-files/feat/popup-mvp1/model/spool-holder/base
- part: floor
  count: 1
  model: spool-holder
  branch: feat/popup-mvp1
  timestamp: '20241125114828'
  last_tag: spool-holder/floor/1.0.0
  version: 1.0.0
  stem: floor-1.0.0-next+20241125114828
  short: 1fl@1.0.0n
  stl_path: /tmp/3d-files/20241125114828-spool-holder/floor-1.0.0-next+20241125114828.stl
  fcad_dir: /home/jan/repos/b3tchi/3d-files/feat/popup-mvp1/model/spool-holder/floor
- part: demi-sec
  count: 1
  model: spool-holder
  branch: feat/popup-mvp1
  timestamp: '20241125114828'
  last_tag: ''
  version: 0.1.0
  stem: demi-sec-0.1.0-next+20241125114828
  short: 1dese@0.1.0n
  stl_path: /tmp/3d-files/20241125114828-spool-holder/demi-sec-0.1.0-next+20241125114828.stl
  fcad_dir: /home/jan/repos/b3tchi/3d-files/feat/popup-mvp1/model/spool-holder/demi-sec

#+end_example

#+begin_src emacs-lisp
   (defun my-remove-variables-from-imenu-index (index)
     "Remove 'Variables' category entries from imenu INDEX."
     (seq-filter
      (lambda (item)
        (let ((name (car item)))
          (not (and (stringp name) (string-equal name "Variables")))))
      index))

   (defun my-customize-imenu ()
     "Customize imenu to exclude 'Variables' entries."
     ;; Set custom index function that includes post-processing
     (setq imenu-create-index-function
           (lambda ()
             (my-remove-variables-from-imenu-index (imenu-default-create-index-function)))))

   ;; Add to desired mode hooks, for example, for programming modes:
   (add-hook 'nushell-ts-mode-hook 'my-customize-imenu)
#+end_src

#+RESULTS:
#+begin_example
Error: [31mnu::parser::unbalanced_delimiter[0m

  [31m×[0m Unbalanced delimiter.
    ╭─[[36;1;4m/home/jan/repos/b3tchi/3d-files/feat/popup-mvp1/nushell-5YbmJ5[0m:14:20]
 [2m13[0m │  [2m7[0m │         name: $part
 [2m14[0m │  [2m8[0m │     }
    · [35;1m         ┬[0m
    ·          [35;1m╰── [35;1munbalanced { and }[0m[0m
 [2m15[0m │    · [35;1m     ┬[0m
    ╰────

#+end_example
